[{"C:\\Programação\\NewGitHub\\React\\React Inicio\\React\\calculadora\\src\\App.js":"1","C:\\Programação\\NewGitHub\\React\\React Inicio\\React\\calculadora\\src\\components\\main\\Calculator.jsx":"2","C:\\Programação\\NewGitHub\\React\\React Inicio\\React\\calculadora\\src\\index.js":"3","C:\\Programação\\NewGitHub\\React\\React Inicio\\React\\calculadora\\src\\components\\button\\button.jsx":"4"},{"size":528,"mtime":1610990091286,"results":"5","hashOfConfig":"6"},{"size":4236,"mtime":1611096747087,"results":"7","hashOfConfig":"6"},{"size":544,"mtime":1611074715610,"results":"8","hashOfConfig":"6"},{"size":476,"mtime":1611080306663,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j7ncvq",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Programação\\NewGitHub\\React\\React Inicio\\React\\calculadora\\src\\App.js",[],"C:\\Programação\\NewGitHub\\React\\React Inicio\\React\\calculadora\\src\\components\\main\\Calculator.jsx",["19"],"import React, { Component } from 'react'\r\nimport './Calculator.css'\r\n\r\nimport Button from '../button/button'\r\nimport Display from '../display/display'\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = { ...initialState }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n    }\r\n\r\n    clearMemory() {\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation) {\r\n        if (this.state.current === 0) {\r\n            this.setState({ operation, current: 1, clearDisplay: true })\r\n        } else {\r\n\r\n            const equals = operation === '='\r\n\r\n            let currentOperation = this.state.operation\r\n\r\n            console.log(currentOperation)\r\n\r\n            if (currentOperation === 'x') {\r\n                currentOperation = '*'\r\n            } \r\n            \r\n            else if (currentOperation === '÷') {\r\n                currentOperation = '/'\r\n            }\r\n\r\n            const values = [...this.state.values]\r\n\r\n\r\n            try {\r\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\r\n            } catch(e) {\r\n                values[0] = this.state.values[0]\r\n            }\r\n\r\n            values[1] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n\r\n                operation: equals ? null : operation,\r\n\r\n                current: equals ? 0 : 1,\r\n\r\n                clearDisplay: !equals, \r\n\r\n                values\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n) {\r\n        if (n === ',' && this.state.displayValue.includes(',')) {\r\n            return \r\n        }\r\n\r\n        const clearDisplay = this.state.displayValue === '0' \r\n            || this.state.clearDisplay\r\n\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n\r\n        const displayValue = currentValue + n\r\n        this.setState({ displayValue, clearDisplay: false })\r\n\r\n        if (n !== ',') {\r\n            const i = this.state.current\r\n\r\n            const newValue = parseFloat(displayValue)\r\n\r\n            const values = [...this.state.values]\r\n\r\n            values[i] = newValue\r\n\r\n            this.setState({ values })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        // const addDigit = n => this.addDigit(n)\r\n\r\n        // const setOperation = op => this.setOperation(op)\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"titulo\">\r\n                    Calculadora <br/>\r\n                    React\r\n                </h1>\r\n                <div className=\"calculator\">\r\n                    <Display value={this.state.displayValue}/>\r\n                    <Button label=\"AC\" click={this.clearMemory}/>\r\n                    <Button label=\"±\" click={this.setOperation}/>\r\n                    <Button label=\"%\" click={this.setOperation}/>\r\n                    <Button label=\"÷\" click={this.setOperation} operation/>\r\n                    <Button label=\"7\" click={this.addDigit} />\r\n                    <Button label=\"8\" click={this.addDigit} />\r\n                    <Button label=\"9\" click={this.addDigit} />\r\n                    <Button label=\"x\" click={this.setOperation} operation/>\r\n                    <Button label=\"4\" click={this.addDigit} />\r\n                    <Button label=\"5\" click={this.addDigit} />\r\n                    <Button label=\"6\" click={this.addDigit} />\r\n                    <Button label=\"-\" click={this.setOperation} operation/>\r\n                    <Button label=\"1\" click={this.addDigit} />\r\n                    <Button label=\"2\" click={this.addDigit} />\r\n                    <Button label=\"3\" click={this.addDigit} />\r\n                    <Button label=\"+\" click={this.setOperation} operation/>\r\n                    <Button label=\"0\" click={this.addDigit} double />\r\n                    <Button label=\",\" click={this.addDigit} />\r\n                    <Button label=\"=\" click={this.setOperation} operation/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","C:\\Programação\\NewGitHub\\React\\React Inicio\\React\\calculadora\\src\\index.js",[],"C:\\Programação\\NewGitHub\\React\\React Inicio\\React\\calculadora\\src\\components\\button\\button.jsx",[],{"ruleId":"20","severity":1,"message":"21","line":53,"column":29,"nodeType":"22","messageId":"23","endLine":53,"endColumn":33},"no-eval","eval can be harmful.","CallExpression","unexpected"]